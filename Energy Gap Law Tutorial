{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1RBXHqPAVUrHd3_gxGoxl2VcNwEHywZ2m","timestamp":1741200981668}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"Q1KGXZlAUT3a"},"source":["# Quantitative Analysis of Absorption and Emission Data\n","In this script we describe some of the many steps used to study the relationship between energy gap and radiative/nonradiative rates.  This collaboratory script accompanies our manuscript (Friedman et al. chemrxiv https://doi.org/10.26434/chemrxiv.14374493.v1)\n","\n","Our goal is to provide  clear set of steps that can be used to reproduce our analysis for other chromophore constructs.  It is structured to require input of a spectrally resolved absorption, spectrally resolved emission spectra, total fluorescence rate, and quantum yield. It then calculates all values in Table 1 excluding $\\phi_F$ and $k_{tot}$ and all values in Table 2.\n","Additionally, we decribe of method solve  C from the nonradiative rate equation.\n","\n","To make edits to this tutorial for use in your own projects, you will need to save it as a copy within your drive.\n","\n","Please direct questions to Justin Caram (jcaram@chem.ucla.edu).\n"]},{"cell_type":"markdown","metadata":{"id":"dxjxd087szdT"},"source":["####Importing Data\n","\n","In the first step, we provide some sample data to accompany this analysis. Our github respository consists of\n","\n","\n","1.   Spectrally Resolved Absorption Cross Section\n","2.   Spectrally Resolved Emission Spectrum\n","\n","\n","If you wish, you can manually import csv files by adding it to your google drive using the code below.\n","```\n","from google.colab import drive\n","\n","drive.mount('/content/drive/')\n","```\n","It will ask you for access to your drive to dock in a pop up.\n","then replace the current path in the np.loadtxt with the path on your google drive file.\n","\n","\n","\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5lEO82jrYbPG","executionInfo":{"status":"ok","timestamp":1629846876219,"user_tz":420,"elapsed":721,"user":{"displayName":"Justin Caram","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiYL1UCpXsu0CmdDOmt1W_a8XvUMOSLd6_FQou_2Q=s64","userId":"10394994080398149029"}},"outputId":"bfa97f49-46db-40fa-f168-22adad2e09e3"},"source":["!git clone https://github.com/CaramGroup/EQME-Tutorial"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Cloning into 'EQME-Tutorial'...\n","remote: Enumerating objects: 4, done.\u001b[K\n","remote: Counting objects: 100% (4/4), done.\u001b[K\n","remote: Compressing objects: 100% (4/4), done.\u001b[K\n","remote: Total 4 (delta 0), reused 0 (delta 0), pack-reused 0\u001b[K\n","Unpacking objects: 100% (4/4), done.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"iqK2SRlSQME0"},"source":["import numpy as np\n","#Importing of Variables\n","abscoeff=np.loadtxt('/content/EQME-Tutorial/AbsCoeffFlav7 - Sheet1.csv', delimiter = ',')\n","em=np.loadtxt('/content/EQME-Tutorial/EmFlav7 - Sheet1.csv', delimiter = ',')\n","phi=0.61e-2 #Quantum Yield\n","phierr=.02e-2 #Error on Quantum yield measurment\n","ktot=147e8 #Lifetime in s^-1\n","ktoterr=2e8 #Error from lifetime fit\n","n=1.41 #refractive index in DCM\n","\n","#Importing of Constants\n","c=2.998e8 #Speed of light\n","hbar=1.055e-34 #Js #Planck's Constant\n","h=6.626e-34# Js #Planck's Constant\n","alpha=1.986e-23 #J/(cm^-1) #Conversion Joules to Wavenumbers\n","q=1.6e-19 #Charge of an electron in Coulombs\n","m=9.1e-31 #kg Mass of electron in Coulombs\n","ep0=8.854e-12 #C^2/(Jm) Permitivity of Free Space\n","nu=c/n #Speed of light in DCM\n","Na=6.02e23 #Avogadros number"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"dALhvlZgtBNJ"},"source":["## Finding Energy Gap and Stokes Shift\n","1. Convert the x-axis into energy units. (We will use joules so that this new x axis can be used later)\n","$$E=\\frac{hc}{\\lambda}$$\n","\n","2. Find the maximum energy of absorption and emission\n","3. Average to determine the $E_g$\n","\n","$$E_g=\\frac{1}{2}(E_{max, em}+E_{max, abs})$$\n","4. Subtract to determine stokes shift, $E_{ST}$\n","\n","$$E_{ST}=E_{max, abs}-E_{max, em}$$\n","\n","\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"Y0Rm29bru2Kt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1629846880946,"user_tz":420,"elapsed":111,"user":{"displayName":"Justin Caram","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiYL1UCpXsu0CmdDOmt1W_a8XvUMOSLd6_FQou_2Q=s64","userId":"10394994080398149029"}},"outputId":"0c240e8e-37c2-4254-c6a3-cd16658c5189"},"source":["# Step 1.\n","absJ=h*c*1e9 /(abscoeff[:,0]) # Absorption energy starting axis in joules\n","abss=c*1e9 /(2*np.pi*abscoeff[:,0]) # Absorption energy starting axis in angular frequency\n","emJ=h * c*1e9/(em[:,0])  # Emission energy axis in joules\n","\n","# Step 2\n","maxabs=np.argmax(abscoeff[:,1]) # Maximum of absorption\n","maxem=np.argmax(em[:,1]) # Maximum of emission\n","maxaJ=absJ[maxabs] # Point of maximum absorbtion\n","maxeJ=emJ[maxem] # Point of maximum emission\n","\n","#Step 3\n","Eg=.5*(maxaJ+maxeJ) # Value for Energy gap\n","print('Eg is',Eg, 'J or',Eg/alpha,'cm^-1')\n","#Step 4\n","Est=(maxaJ-maxeJ) # Value for stokes shift\n","print('E_ST is',Est, 'J or',Est/alpha, 'cm^-1')\n","\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Eg is 1.9103704184548066e-19 J or 9619.186397053407 cm^-1\n","E_ST is 4.7759260461370375e-21 J or 240.4796599263362 cm^-1\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"8QokvCo2AfgG"},"source":["## Determining $k_r$, $k_{nr}$, $f_{21}$\n","\n"]},{"cell_type":"markdown","metadata":{"id":"6DMS5HsoAjKh"},"source":["1. Solve for $k_r$\n","\n","$$k_r=k_{tot}\\times\\phi_F$$\n","2. Determine $k_r$ error\n","\n","$$k_{r,err}=\\sqrt{(\\frac{k_{tot,err}}{k_{tot}})^2+(\\frac{\\phi_{F,err}}{\\phi_{F}})^2}\\times k_r$$\n","3. Solve for $k_{nr}$\n","\n","$$k_{nr}=k_{tot}(1-\\phi_F)$$\n","4. Determine $k_{nr}$ error\n","\n","$$k_{nr,err}=\\sqrt{(\\frac{k_{tot,err}}{k_{tot}})^2+(\\frac{\\phi_{F,err}}{\\phi_{F}})^2}\\times k_{nr}$$\n","\n","5. Solve for $f_{21}$\n","\n","$$f_{21}=\\frac{2\\pi\\epsilon_0m\\hbar^2c^3k_r}{nq^2{E_g}^2}$$\n","\n","\n","6. Determine $f_{21}$ error\n","\n","$$f_{21,err}=\\frac{2\\pi\\epsilon_0m\\hbar^2c^3k_{r,err}}{nq^2{E_g}^2}k_{r,err}$$\n"]},{"cell_type":"code","metadata":{"id":"5SJKqRj6u2xO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1629846884207,"user_tz":420,"elapsed":165,"user":{"displayName":"Justin Caram","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiYL1UCpXsu0CmdDOmt1W_a8XvUMOSLd6_FQou_2Q=s64","userId":"10394994080398149029"}},"outputId":"9033590d-f874-44fc-fc62-ff2f6ed3d55b"},"source":["#Step 1\n","kr=ktot*phi\n","\n","#Step 2\n","krerr=kr*((ktoterr/ktot)**2+(phierr/phi)**2)**0.5\n","print('kr is',kr, '+\\-',krerr, 's^-1' )\n","\n","#Step 3\n","knr=ktot*(1-phi)\n","#Step 4\n","knrerr=((ktoterr/ktot)**2+(phierr/phi)**2)**0.5*knr\n","print('knr is',knr, '+\\-',knrerr, 's^-1' )\n","\n","#Step 5\n","f21=-2*np.pi*ep0*m*hbar**2*c**3*kr/(n*q**2*Eg**2)\n","\n","#Step 6\n","f21err=2*np.pi*ep0*m*hbar**2*nu**3*krerr/(q**2*Eg**2)\n","print('f21 is',f21, '+\\-',f21err )\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["kr is 89670000.0 +\\- 3183080.2691732426 s^-1\n","knr is 14610330000.0 +\\- 518633357.3002108 s^-1\n","f21 is -1.0335071982220345 +\\- 0.01845337049247572\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"YStJv9YmQsc0"},"source":["#Calculating Integrated Absorption Cross section\n","1. Plot absorption spectra in Joules\n","2. Make note of approximately the start and end point of the entire vibronic progression of the electronic transition of interest.\n","(This is pretty simple in the polymethine dyes studied in this paper, but if the electronic states are closer together, you can use your best judgement)\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":297},"id":"1UHdjB84LW_z","executionInfo":{"status":"ok","timestamp":1629846888503,"user_tz":420,"elapsed":354,"user":{"displayName":"Justin Caram","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiYL1UCpXsu0CmdDOmt1W_a8XvUMOSLd6_FQou_2Q=s64","userId":"10394994080398149029"}},"outputId":"13dbe80c-b4c0-48aa-ca97-90bbe0992c2f"},"source":["import matplotlib.pyplot as plt\n","plt.plot(absJ,abscoeff[:,1])\n","plt.minorticks_on"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<function matplotlib.pyplot.minorticks_on>"]},"metadata":{},"execution_count":5},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"JO0kZ9xXR8mh"},"source":["3. Linear interpolate the molar absorption coefficient, the molar absorption coefficient plus or minus the error from the start point and end point you determine. Keeping the total number of points the same.\n","  \n","4. Use numerical integration method, here simpsons rule for the molar absorption coefficient and error bounds.\n","5. Subtract the bounds and divide by two to determine the error.\n","5. Convert this value to absorption cross section\n","$$\\sigma_0=\\frac{1000}{N_A log_{10} e}\\int_{\\omega_1}^{\\omega_2} \\!\\epsilon(E)\\,\\mathrm{d}E$$"]},{"cell_type":"code","metadata":{"id":"ty2l96B2MDob","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1629846891812,"user_tz":420,"elapsed":598,"user":{"displayName":"Justin Caram","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiYL1UCpXsu0CmdDOmt1W_a8XvUMOSLd6_FQou_2Q=s64","userId":"10394994080398149029"}},"outputId":"be025ceb-b9a6-4cfa-b303-5fb347944544"},"source":["from scipy import interpolate\n","abscoeffh=abscoeff[:,1]+abscoeff[:,2]\n","abscoeffl=abscoeff[:,1]-abscoeff[:,2]\n","\n","absjn=np.linspace(h*c*1e9/1200,h*c*1e9/700,1000)\n","fm=interpolate.interp1d(absJ,abscoeff[:,1],'linear')\n","abscoeffint=fm(absjn)\n","fh=interpolate.interp1d(absJ,abscoeffh,'linear')\n","abscoeffhint=fh(absjn)\n","fl=interpolate.interp1d(absJ,abscoeffl,'linear')\n","abscoefflint=fl(absjn)\n","\n","from scipy import integrate\n","intabs=integrate.simps(abscoeffint,absjn)\n","intabsh=integrate.simps(abscoeffhint,absjn)\n","intabsl=integrate.simps(abscoefflint,absjn)\n","intabserr=0.5*(intabsh-intabsl)\n","intabs2=integrate.simps(abscoeff[:,1],absJ)\n","print(intabs, intabs2)\n","sigma=0.1/(Na*np.log10(np.exp(1)))*intabs\n","sigmaerr=0.1/(Na*np.log10(np.exp(1)))*intabserr\n","\n","\n","print('Integrated Absorption cross section is', sigma, '+/-',sigmaerr, 'm^2 J')\n","\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["5.5745917958171315e-15 8.539022574381117e-15\n","Integrated Absorption cross section is 2.132221257238444e-39 +/- 1.5621530820628396e-41 m^2 J\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Y4nM18zRTvh7"},"source":["# Manipulation of Integrated Absorption Cross section\n","\n","\n","1. Solve for $f_{12}$\n","\n","$$f_{12}=\\frac{2\\epsilon_0 nmc\\sigma_0}{\\hbar \\pi q^2}$$\n","2. Determine $f_{12}$ error\n","\n","$$f_{12,err}=\\frac{2\\epsilon_0 mc\\sigma_{0,err}}{\\pi \\hbar q^2}$$\n","\n","3. Determine degeneracy ratio,$\\frac{g_2}{g_1}$\n","\n","$$\\frac{g_2}{g_1}=-\\frac{f_{12}}{f_{21}}$$\n","\n","4. Determine $\\frac{g_2}{g_1}$ Error\n","\n","$$(\\frac{g_2}{g_1})_{err}=\\sqrt{(\\frac{f_{12,err}}{f_{12}})^2+(\\frac{f_{21,err}}{f_{21}})^2}\\frac{g_2}{g_1}$$\n","\n",">Within the paper we used the average and standard deviation across several dyes across the same methine bridge length as our degeneracy ratio and error respectively.\n","\n","5. Solve $|\\mu'_{21}|$ (eq 4)\n","> Transition dipole moment based on Absorption cross section\n","\n","\n","\n","$$|\\mu'_{21}|=\\sqrt{3\\frac{g_1 \\epsilon n\\hbar c }{g_2\\pi E_g}\\sigma_0} $$\n","\n","6. Determine $|\\mu'_{21}|$ Error\n","$$|\\mu'_{21,err}|=\\frac{1}{2}\\mu'_{21}\\sqrt{((\\frac{g_2/g_1)_{err}}{(g_2/g_1)})^2+(\\frac{\\sigma_{0,err}}{\\sigma_0})^2}$$\n","\n","7. Solve $|\\mu_{21}|$ (eq 3)\n",">Transition dipole based on radiative rate\n","\n","$$|\\mu_{21}|=\\sqrt{3\\frac{\\pi\\epsilon_0\\hbar^3c^3}{nE_g^3}k_r}$$\n","8. Error\n","$$|\\mu_{21,err}|=\\frac{k_{r,err}}{2k_r}\\mu_{21}$$\n","\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"Hs32JZYoThkZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1629846896120,"user_tz":420,"elapsed":106,"user":{"displayName":"Justin Caram","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiYL1UCpXsu0CmdDOmt1W_a8XvUMOSLd6_FQou_2Q=s64","userId":"10394994080398149029"}},"outputId":"b147a966-08bb-4d3c-a850-8c73577bfcb3"},"source":["#Step 1\n","f12=2*ep0*n*m*c*sigma/(hbar*np.pi*q**2) #Oscillator strength for absorption\n","#Step 2\n","f12err=2*ep0*n*m*c*sigmaerr/(hbar*np.pi*q**2) #Error on Oscilator strength for absorption\n","print('f_12 is', f12,'+/-',f12err)\n","#Step 3\n","g2g1=-f12/f21 # Degeneracy Factor\n","#Step 4\n","g2g1err=((f12err/f12)**2*(f21err/f21)**2)**0.5*g2g1 # Degeneracy Factor error\n","print('g_2/g_1 is',g2g1,'+/-',g2g1err)\n","#Step 5\n","u21p=np.absolute(3*ep0*n*hbar*c*sigma/(np.pi*Eg))**0.5 #Transition Dipole moment from absorption\n","#Step 6\n","u21perr=.5*u21p*((g2g1err/g2g1)**2+(sigmaerr/sigma)**2)**0.5 #Error on transition dipole moment from absorption\n","print('Transition dipole moment based on equation 3 is',u21p/3.3356e-30,'+/-',u21perr/3.3356e-30,'Debye')\n","print('Transition dipole moment based on equation 3 is',u21p,'+/-',u21perr, 'C*m^-1')\n","\n","#Step 7\n","u21=(3*np.pi*ep0*hbar**4*c**3*kr/(n*Eg**3))**0.5 #transition dipole moment form emission\n","#Step 8\n","u21err=krerr/(2*kr)*u21\n","print('Transition dipole moment based on equation 4 is',u21/3.3356e-30,'+/-',u21err/3.3356e-30, 'Debye')\n","print('Transition dipole moment based on equation 4 is',u21,'+/-',u21err, 'C*m^-1')\n","\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["f_12 is 1.711794465506617 +/- 0.012541311043923397\n","g_2/g_1 is 1.6562966067884726 +/- 0.00021666643066694163\n","Transition dipole moment based on equation 3 is 19.44869327636555 +/- 0.07125592287186033 Debye\n","Transition dipole moment based on equation 3 is 6.487306129264493e-29 +/- 2.3768125633137734e-31 C*m^-1\n","Transition dipole moment based on equation 4 is 15.111980032856792 +/- 0.2682203940600338 Debye\n","Transition dipole moment based on equation 4 is 5.0407520597597116e-29 +/- 8.946759464266488e-31 C*m^-1\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"_1Wyp1TdmWtk"},"source":[],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LywsqX5ZbaqP"},"source":["#Determining derivative coupling strength, C, by fitting nonradiative rate\n","\n","Herein we will use a smaller data set to explain how we determined the C within the the EQME.\n","\n","1. We chose the largest Stokes shift for our dataset as an overestimation\n","\n","2. Then we solve for C given this $E_{ST} $\n","\n","$$C^2=\\frac{\\hbar\\sqrt{E_M E_g}k_{nr}}{\\sqrt{2\\pi}}exp[\\frac{E_g}{E_M}(ln( \\frac{2 E_g}{\\gamma_M E_{st}})-1)]$$\n","3. We chose a common C such thatthe theoretical fit will be equal to or less than the experimental, this will be the minimum value of C. We will plot a wrong example followed by the the correct example."]},{"cell_type":"code","metadata":{"id":"2TQNby85lXxn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1629846899135,"user_tz":420,"elapsed":102,"user":{"displayName":"Justin Caram","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiYL1UCpXsu0CmdDOmt1W_a8XvUMOSLd6_FQou_2Q=s64","userId":"10394994080398149029"}},"outputId":"cb9cb77e-9168-4001-aa4f-5104054046e3"},"source":["Est2=298*alpha # Stokes Shift\n","Em=3000*alpha # Energy of highest frequency vibration\n","\n","expdata=np.array([[9276, 147e8],[9603,146e8],[9814,83.4e8],[10011,67e8]]) # Energy gap and lifetime data\n","expenergy=expdata[:,0]*alpha #Conversion of energy data to Joules\n","Cc=np.sqrt(hbar*expdata[:,1]*np.sqrt(Em*expenergy/(2*np.pi))*np.e**(expenergy/Em*(np.log(2*expenergy/Est2)-1))) # Nonadiabatic coupling estimate C\n","\n","xenergy=np.linspace(9000*alpha,10500*alpha,200) # Joule Axis\n","\n","\n","knrth0=Cc[0]**2*np.sqrt(2*np.pi/(Em*xenergy))/hbar*np.e**(-xenergy/Em*(np.log(2*xenergy/Est2)-1))\n","knrth1=Cc[1]**2*np.sqrt(2*np.pi/(Em*xenergy))/hbar*np.e**(-xenergy/Em*(np.log(2*xenergy/Est2)-1))\n","knrth2=Cc[2]**2*np.sqrt(2*np.pi/(Em*xenergy))/hbar*np.e**(-xenergy/Em*(np.log(2*xenergy/Est2)-1))\n","knrth3=Cc[3]**2*np.sqrt(2*np.pi/(Em*xenergy))/hbar*np.e**(-xenergy/Em*(np.log(2*xenergy/Est2)-1))\n","\n","\n","print('C=',Cc/alpha)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["C= [1622.72628407 2045.12314252 1800.01727956 1860.9886886 ]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":267},"id":"UuimCCzXEj-G","executionInfo":{"status":"ok","timestamp":1629846903900,"user_tz":420,"elapsed":634,"user":{"displayName":"Justin Caram","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiYL1UCpXsu0CmdDOmt1W_a8XvUMOSLd6_FQou_2Q=s64","userId":"10394994080398149029"}},"outputId":"7496b216-7fda-44fc-e9e9-0afb7725b7c5"},"source":["import matplotlib.pyplot as plt\n","fig, ax = plt.subplots(figsize=(4, 3))\n","\n","ax.plot(expenergy,expdata[:,1],'o')\n","ax.plot(xenergy,knrth2)\n","ax.set_xlabel('$E_g ( J )$',fontsize='large')\n","ax.set_ylabel(r'$k_{nr} (s^{-1})$',fontsize='large')\n","ax.set_title(f'For C= {Cc[2]/alpha} cm^-1',fontsize='large')\n","plt.yscale('log')\n","print('Example of a C we would not use')\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Example of a C we would not use\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 288x216 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":267},"id":"YxbU-0EWLdM_","executionInfo":{"status":"ok","timestamp":1629846906784,"user_tz":420,"elapsed":392,"user":{"displayName":"Justin Caram","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiYL1UCpXsu0CmdDOmt1W_a8XvUMOSLd6_FQou_2Q=s64","userId":"10394994080398149029"}},"outputId":"afaf4c47-c7ff-4079-e684-17239a0ad82b"},"source":["import matplotlib.pyplot as plt\n","\n","fig, ax = plt.subplots(figsize=(4, 3))\n","ax.plot(expenergy,expdata[:,1],'o')\n","ax.plot(xenergy,knrth0)\n","ax.set_xlabel('$E_g ( J )$',fontsize='large')\n","ax.set_ylabel(r'$k_{nr} (s^{-1})$',fontsize='large')\n","ax.set_title(f'For C= {Cc[0]/alpha} cm^-1',fontsize='large')\n","plt.yscale('log')\n","print('Example of a C that fits the parameters we want')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Example of a C that fits the parameters we want\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 288x216 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"XwBOXErdfeFM"},"source":["Comparing dyes using  $\\chi$ and $\\xi$ between two chromophores A (IR-27) and B (Flav7) (more details are discussed in the supplemental video as well)\n","\n","> Indented block\n","\n","\n","\n","To do this you will need $E_g, E_{ST}, \\phi_F$ for the dyes you are comparing.If you have a known $\\gamma_M$ this will yield more accurate results\n","\n","1. We will do the direct comparison\n","$$\\chi=\\phi_b/\\phi_a-1$$\n","\n","2. Next is the energy gap indepent parameter $\\xi$ where we first must estimate the slope, $\\kappa$ of $log(\\phi_F)$ with respect to $E_g$\n","$$\\kappa=\\frac{ln(2E_{g,a}/\\gamma_m E_{ST,a})}{E_M}+\\frac{7}{2E_{g,a}}$$\n","\n","3. Solve for $\\xi$\n","$$\\xi=\\frac{\\phi_b}{\\phi_a}e^{-\\kappa(E_b-E_a)}-1$$\n","\n","$\\chi or \\xi > 0$  means an improvement without or with energy gap considerations, respectively"]},{"cell_type":"code","metadata":{"id":"vOR0JuLbje18","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1629846909391,"user_tz":420,"elapsed":106,"user":{"displayName":"Justin Caram","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiYL1UCpXsu0CmdDOmt1W_a8XvUMOSLd6_FQou_2Q=s64","userId":"10394994080398149029"}},"outputId":"a63f52ee-e920-4476-9708-e5b260f9de1c"},"source":["#enter variables\n","Ega=10011*alpha\n","Egb=9603*alpha\n","phia=.35e-2\n","phib=.61e-2\n","Esta=240.5*alpha\n","gamma=1\n","Em=3000*alpha\n","#Step 1\n","chi=phib/phia-1\n","print('chi is', chi)\n","#Step 2\n","kappa=np.log(2*Ega/(gamma*Esta))/Em+7/(2*Ega)\n","#Step 3\n","xi=phib/phia*np.e**(-kappa*(Egb-Ega))-1\n","print('xi is', xi)\n","\n","\n","\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["chi is 0.7428571428571429\n","xi is 2.6676194047192507\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ECxbES-vcjCo"},"source":[],"execution_count":null,"outputs":[]}]}